{"pageProps":{"note":{"id":"8k7fj3knfjs2vz42yxldbzk","title":"JavaScript","desc":"","updated":1662226133532,"created":1648190780500,"custom":{},"fname":"notes.topic.javascript","type":"note","vault":{"fsPath":"dependencies/localhost/learning-notes","selfContained":true,"name":"learning-notes","sync":"sync"},"contentHash":"1a7838bb3ba5f9947e9acf4ef3005b1a","links":[],"anchors":{"execution-context":{"type":"header","text":"Execution context","value":"execution-context","line":12,"column":0,"depth":2},"two-stages-of-execution-context":{"type":"header","text":"Two stages of Execution context","value":"two-stages-of-execution-context","line":20,"column":0,"depth":3},"two-types-of-execution-context":{"type":"header","text":"Two types of execution context","value":"two-types-of-execution-context","line":25,"column":0,"depth":3},"lexical-environment":{"type":"header","text":"Lexical environment","value":"lexical-environment","line":31,"column":0,"depth":2},"scope-chain":{"type":"header","text":"Scope chain","value":"scope-chain","line":40,"column":0,"depth":2},"block":{"type":"header","text":"Block","value":"block","line":46,"column":0,"depth":2},"let-and-const":{"type":"header","text":"let and const","value":"let-and-const","line":51,"column":0,"depth":2},"closure":{"type":"header","text":"closure","value":"closure","line":58,"column":0,"depth":2},"hoisting":{"type":"header","text":"Hoisting","value":"hoisting","line":62,"column":0,"depth":2},"takeaways":{"type":"header","text":"Takeaways","value":"takeaways","line":71,"column":0,"depth":3},"difference-between-arrow-function-and-normal-function":{"type":"header","text":"Difference between arrow function and normal function","value":"difference-between-arrow-function-and-normal-function","line":76,"column":0,"depth":2},"call-bind-apply":{"type":"header","text":"Call, bind, apply","value":"call-bind-apply","line":95,"column":0,"depth":2},"call":{"type":"header","text":"Call","value":"call","line":97,"column":0,"depth":3},"bind":{"type":"header","text":"bind","value":"bind","line":102,"column":0,"depth":3},"currying":{"type":"header","text":"Currying","value":"currying","line":129,"column":0,"depth":2},"imp-interview-ques":{"type":"header","text":"imp interview ques","value":"imp-interview-ques","line":152,"column":0,"depth":3},"debounce":{"type":"header","text":"Debounce","value":"debounce","line":155,"column":0,"depth":2},"this":{"type":"header","text":"this","value":"this","line":159,"column":0,"depth":2},"event-propagation":{"type":"header","text":"Event Propagation","value":"event-propagation","line":164,"column":0,"depth":2},"async-vs-defer":{"type":"header","text":"Async vs defer","value":"async-vs-defer","line":176,"column":0,"depth":2},"defer":{"type":"header","text":"Defer","value":"defer","line":178,"column":0,"depth":3},"folder-structure":{"type":"header","text":"Folder structure","value":"folder-structure","line":198,"column":0,"depth":2},"fundamentals":{"type":"header","text":"Fundamentals","value":"fundamentals","line":206,"column":0,"depth":2},"array-methods":{"type":"header","text":"Array Methods","value":"array-methods","line":211,"column":0,"depth":2},"reduce":{"type":"header","text":"reduce","value":"reduce","line":212,"column":0,"depth":3},"polyfill-for-map":{"type":"header","text":"polyfill for map","value":"polyfill-for-map","line":230,"column":0,"depth":3},"promise":{"type":"header","text":"Promise","value":"promise","line":244,"column":0,"depth":2},"promiseall":{"type":"header","text":"Promise.all","value":"promiseall","line":269,"column":0,"depth":3},"callback-hell":{"type":"header","text":"Callback hell","value":"callback-hell","line":273,"column":0,"depth":2},"ariety":{"type":"header","text":"Ariety","value":"ariety","line":281,"column":0,"depth":2},"prototypical-ineritence":{"type":"header","text":"Prototypical Ineritence","value":"prototypical-ineritence","line":300,"column":0,"depth":2}},"children":["y1ng2qxm7ukl5sce22whs3d"],"parent":"trkx8xrg7g2fm023ez4ldqj","data":{}},"body":"<h1 id=\"javascript\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#javascript\"></a>JavaScript</h1>\n<p>JS is a synchronous, single threaded language.\nSingle treaded means runs one command at a time and in a specific order.\nJS is loosely typed language. This means any variable is not strictly bind to a data type.</p>\n<h2 id=\"execution-context\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#execution-context\"></a>Execution context</h2>\n<p>Execution context is simply the environment within which your code is ran.\nIt has 2 components</p>\n<ul>\n<li>Memory Component(Variable environment): variable and funcs are stored in key: value pairs.</li>\n<li>Code Component(Thread of execution): place where code is executed one line at a time.</li>\n</ul>\n<h3 id=\"two-stages-of-execution-context\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#two-stages-of-execution-context\"></a>Two stages of Execution context</h3>\n<ul>\n<li><strong>creation</strong>(memory creation) and</li>\n<li><strong>executing</strong>(code execution) phase.</li>\n</ul>\n<h3 id=\"two-types-of-execution-context\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#two-types-of-execution-context\"></a>Two types of execution context</h3>\n<ul>\n<li>Global and Function</li>\n</ul>\n<p>As the JavaScript engine starts to read your code, it creates something called the Global Execution Context.</p>\n<h2 id=\"lexical-environment\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lexical-environment\"></a>Lexical environment</h2>\n<ul>\n<li>A lexical environment is basically the scope or environment the engine is currently\nreading code in.</li>\n<li>A new lexical environment is created when curly brackets {} are used,\neven nested brackets [object Object] create a new lexical environment.</li>\n<li>The execution context tells the engine which lexical environment it is currently working in and the lexical scope determines the available variables.</li>\n<li>lexical env of a func: local memory of function + refrence to lexical parents's lexical env(closure) + lexical env of parent's parent until global scope.</li>\n</ul>\n<h2 id=\"scope-chain\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scope-chain\"></a>Scope chain</h2>\n<p>Each environment context that is created has a link outside of its lexical environment\ncalled the scope chain. The scope chain gives us access to variables in the parent\nenvironment.</p>\n<h2 id=\"block\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#block\"></a>Block</h2>\n<ul>\n<li>defined by <code>{}</code>. It groups together multiple js statements and use it where js syntax is expecting single statement</li>\n<li>let/const are <code>block scoped</code>.</li>\n<li>a new <code>{}</code> does not create a new scope for <code>var</code>, var is a <code>function</code> scope</li>\n</ul>\n<h2 id=\"let-and-const\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#let-and-const\"></a>let and const</h2>\n<ul>\n<li>are hoiseted, but are in <code>temporal dead zone</code>(the time between a let/const is hoisted and initialized with a value) for the time being.</li>\n<li>accessing a variable in temporal dead zone throws reference error</li>\n<li>cannot redeclare let and const within the same scope unlike <code>var</code>. let will throw syntax error and const will throw Type error, since const is of <code>constant</code> type.</li>\n<li><code>const</code> needs to be declare and initialization at the same time, unlike <code>let</code> which can be initialized later in the code.</li>\n<li>unlinke <code>var</code> let/const are block scoped. Each <code>{}</code> creates a new scope for let/const</li>\n</ul>\n<h2 id=\"closure\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#closure\"></a>closure</h2>\n<p>function along with its lexical scope bundled together forms a closure.\nUses: currying</p>\n<h2 id=\"hoisting\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hoisting\"></a>Hoisting</h2>\n<ul>\n<li>Hoisting is the process of puting all variable and function declarations into memory\nduring the compile phase.</li>\n<li>var are hoisted(allocated memory) and initialized with a value of <code>undefined</code></li>\n<li>function declarations are fully hoisted eg: function a() {}</li>\n<li>function expression are hoisted as undefined. (eg: var a = function () {})</li>\n<li>let and const are hoisted but are not initialized with any initial value. Using them before initialization throws reference error</li>\n</ul>\n<h3 id=\"takeaways\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#takeaways\"></a>Takeaways</h3>\n<p>Avoid hoisting when possible. It can cause memory leaks and hard to catch\nbugs in your code. Use let and const as your go to variables.</p>\n<h2 id=\"difference-between-arrow-function-and-normal-function\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#difference-between-arrow-function-and-normal-function\"></a>Difference between arrow function and normal function</h2>\n<ul>\n<li>arrow funcs are not just a syntactic sugar to normal functions</li>\n<li>They are a compact alternative to a regular function, but also without its own bindings to <code>this</code>, <code>arguments</code>, <code>super</code>, or <code>new.target</code> keywords.</li>\n<li>Arrow func cannot be used as constructors and are not the best option for methods.</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// does not create a new scope</span>\n <span class=\"token literal-property property\">i</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">i</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n <span class=\"token function-variable function\">c</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">i</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints undefined, Window {...} (or the global object)</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 10, Object {...}```</span>\n</code></pre>\n<h2 id=\"call-bind-apply\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#call-bind-apply\"></a>Call, bind, apply</h2>\n<h3 id=\"call\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#call\"></a>Call</h3>\n<ul>\n<li>invoke a function with passed references and arguments.</li>\n<li>used function borrowing</li>\n<li>1st param of call is a reference, i.e what should call bind this to? rest are the arguments to the function</li>\n</ul>\n<h3 id=\"bind\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#bind\"></a>bind</h3>\n<p>returns you a copy of method which can be called later.</p>\n<ul>\n<li>function borrowing</li>\n<li>When a function is used as a callback, <code>this</code> is lost. The bind() method solves this problem.\neg: <a href=\"https://www.w3schools.com/js/js_function_bind.asp\">https://www.w3schools.com/js/js_function_bind.asp</a></li>\n</ul>\n<p>polyfill for bind:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> uname2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">fname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jo\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">lname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joshi\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">city<span class=\"token punctuation\">,</span>state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fname</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lname</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> city <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">myBind2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> fun <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> param <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tfun<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>param<span class=\"token punctuation\">,</span><span class=\"token spread operator\">...</span>arg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> fullName<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">myBind2</span><span class=\"token punctuation\">(</span>uname2<span class=\"token punctuation\">,</span><span class=\"token string\">\"hld\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"currying\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#currying\"></a>Currying</h2>\n<ul>\n<li>by bind method</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> multiplyBy2 <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>by closures</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword control-flow\">return</span> x<span class=\"token operator\">*</span>y\n\t<span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">const</span> multiplyBy2 <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"imp-interview-ques\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#imp-interview-ques\"></a>imp interview ques</h3>\n<p><a href=\"https://javascriptinterviewquestions.com/2020/04/add123-in-javascript-currying-interview.html\">https://javascriptinterviewquestions.com/2020/04/add123-in-javascript-currying-interview.html</a></p>\n<h2 id=\"debounce\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#debounce\"></a>Debounce</h2>\n<ul>\n<li>limiting the rate of execution of a particular function</li>\n</ul>\n<h2 id=\"this\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#this\"></a>this</h2>\n<p>Free function invocations in javascript have <code>this</code> bound to the global scope.</p>\n<h2 id=\"event-propagation\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#event-propagation\"></a>Event Propagation</h2>\n<p>happens in 3 phases</p>\n<ul>\n<li>Capturing phase: event goes down from root element to the target element</li>\n<li>target phase: event reaches the target elem</li>\n<li>bubbling phase: When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.\nTo stop bubbling: event.stopPropagation()</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">the bubbling doesn't reach here</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">event<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Click me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"async-vs-defer\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#async-vs-defer\"></a>Async vs defer</h2>\n<h3 id=\"defer\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#defer\"></a>Defer</h3>\n<p>The defer attribute tells the browser not to wait for the script. Instead, the browser will continue to process the HTML, build DOM. The script loads “in the background”, which makes it non-blocking and then runs when the DOM is fully built.</p>\n<p>Here’s the same example as above, but with defer:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>...content before script...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://javascript.info/article/script-async-defer/long.js?speed=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&#x3C;!-- visible immediately --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>...content after script...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>DOMContentLoadedEvent\nBoth solves two problems\nScripts can’t see DOM elements below them, so they can’t add handlers etc.\nIf there’s a bulky script at the top of the page, it “blocks the page”. Users can’t see the page content till it downloads and runs:</li>\n</ul>\n<h2 id=\"folder-structure\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#folder-structure\"></a>Folder structure</h2>\n<ul>\n<li>package.json: app metadata and configuration</li>\n<li>manifest.json: app metadata that makes application progressive web app.\n<ul>\n<li>provides metadata used when your web app is installed on a\nuser's mobile device or desktop. See <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\">https://developers.google.com/web/fundamentals/web-app-manifest/</a></li>\n</ul>\n</li>\n<li><code>defer</code> in <script></script>\n</li></ul>\n<h2 id=\"fundamentals\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#fundamentals\"></a>Fundamentals</h2>\n<ul>\n<li>browser</li>\n<li>v8 engine</li>\n</ul>\n<h2 id=\"array-methods\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#array-methods\"></a>Array Methods</h2>\n<h3 id=\"reduce\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reduce\"></a>reduce</h3>\n<pre class=\"language-js\"><code class=\"language-JS\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Martha\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Stewart\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Scar\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jo\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">82</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> curr</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token operator\">&#x3C;</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> acc<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">firstname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"polyfill-for-map\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#polyfill-for-map\"></a>polyfill for map</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">myArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> returnArr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span>obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        returnArr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> returnArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"promise\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#promise\"></a>Promise</h2>\n<ul>\n<li>a JS Object which may produce a value in future either a resolved value or a reason it is not reselved</li>\n<li>can be in one of the three states\n<ul>\n<li>pending</li>\n<li>fullfilled or</li>\n<li>rejected</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"even\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"odd\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"promiseall\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#promiseall\"></a>Promise.all</h3>\n<ul>\n<li>The Promise.all() method takes an iterable of promises as an input, and returns a single Promise that resolves to an array of the results of the input promises. </li>\n<li>fail-fast behavior</li>\n</ul>\n<h2 id=\"callback-hell\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#callback-hell\"></a>Callback hell</h2>\n<ul>\n<li>Callback hell is a antipattern when there are nested callbacks leading to unlegibale code.\nCan be fixed by:</li>\n<li>async awaits</li>\n<li>writing promises</li>\n</ul>\n<h2 id=\"ariety\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ariety\"></a>Ariety</h2>\n<p>sum(1)(2)....(5) = //</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> a\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"prototypical-ineritence\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#prototypical-ineritence\"></a>Prototypical Ineritence</h2>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/y1ng2qxm7ukl5sce22whs3d\">Performance</a></li>\n</ol>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Root","desc":"","updated":1655025026733,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"dependencies/localhost/learning-notes","selfContained":true,"name":"learning-notes","sync":"sync"},"contentHash":"bc178ae9d620304b10fedbadacbc746f","links":[],"anchors":{"learning":{"type":"header","text":"Learning","value":"learning","line":7,"column":0,"depth":1}},"children":["fkhev0yr0bbwd3x499erqqp","trkx8xrg7g2fm023ez4ldqj","5mg2j4msjvokz541h0tdvni","c8csxid3zoghxorepwcrami","twdastnk7qsdzm0wt64i6cz","c31i1fsmoluyjb7iffcjabg","v6w7qcvk7gmeht0j9xzdtbd","cev4vzt27wi2rjm3znxgwkl","984qz0r52n001q7yxhrh1sm"],"parent":null,"data":{},"body":"# Learning\n\nThis vault contains my study notes\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableExportPodV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"dependencies/localhost/journal","selfContained":true,"name":"journal"},{"fsPath":"dependencies/localhost/learning-notes","selfContained":true,"name":"learning-notes","sync":"sync"},{"fsPath":"dependencies/localhost/mindfire-solutions","selfContained":true,"name":"mindfire-solutions"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"duplicateNoteBehavior":{"action":"useVault","payload":["learning-notes","mindfire-solutions","journal"]},"siteUrl":"localhost:3000","siteFaviconPath":"favicon.ico","siteIndex":"root","searchMode":"lookup"}}},"__N_SSG":true}