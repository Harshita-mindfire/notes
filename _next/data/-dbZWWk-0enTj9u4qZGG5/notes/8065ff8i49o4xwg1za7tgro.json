{"pageProps":{"note":{"id":"8065ff8i49o4xwg1za7tgro","title":"Algo","desc":"","updated":1650870501456,"created":1650870488071,"custom":{},"fname":"notes.topic.algo","type":"note","vault":{"fsPath":"dependencies/localhost/learning-notes","selfContained":true,"name":"learning-notes","sync":"sync"},"contentHash":"631344a62f00af83e78f0531d984b3d1","links":[],"anchors":{"binary-search-tree":{"type":"header","text":"Binary Search Tree","value":"binary-search-tree","line":10,"column":0,"depth":2},"avl-tree":{"type":"header","text":"AVL Tree","value":"avl-tree","line":22,"column":0,"depth":2},"graph-algos":{"type":"header","text":"Graph Algos","value":"graph-algos","line":25,"column":0,"depth":2},"creating-adjacency-list":{"type":"header","text":"Creating adjacency list","value":"creating-adjacency-list","line":28,"column":0,"depth":3},"dfs":{"type":"header","text":"DFS","value":"dfs","line":54,"column":0,"depth":3},"bfs":{"type":"header","text":"BFS","value":"bfs","line":75,"column":0,"depth":3}},"children":["j9jpiepog4v2wpio08om6ng"],"parent":"trkx8xrg7g2fm023ez4ldqj","data":{}},"body":"<h1 id=\"algo\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#algo\"></a>Algo</h1>\n<p>This hierarchy contains my notes for algorithms</p>\n<h2 id=\"binary-search-tree\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-search-tree\"></a>Binary Search Tree</h2>\n<p>Binary Search Tree is a node-based binary tree data structure which has the following properties:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys lesser than the node’s key.</li>\n<li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li>\n<li>The left and right subtree each must also be a binary search tree.</li>\n</ul>\n<p>Inorder traversal(Left --> Root --> Right) of BST gives a sorted values.</p>\n<h2 id=\"avl-tree\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#avl-tree\"></a>AVL Tree</h2>\n<p>AVL tree is a self-balancing Binary Search Tree (BST) where the difference between heights of left and right subtrees cannot be more than one for all nodes.</p>\n<h2 id=\"graph-algos\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#graph-algos\"></a>Graph Algos</h2>\n<p><a href=\"https://www.youtube.com/watch?v=cWNEl4HE2OE\">https://www.youtube.com/watch?v=cWNEl4HE2OE</a></p>\n<h3 id=\"creating-adjacency-list\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#creating-adjacency-list\"></a>Creating adjacency list</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> airports <span class=\"token operator\">=</span> <span class=\"token string\">\"Del Mum Kol Bng Deh Pnt\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//console.log(airports);</span>\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Del\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Deh\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Del\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mum\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Del\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Bng\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Mum\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kol\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Deh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pnt\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> adjacencyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// add key value</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">airport</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    adjacencyList<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>airport<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nairports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">airport</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span>airport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//console.log(adjacencyList);</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src<span class=\"token punctuation\">,</span> dest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    adjacencyList<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    adjacencyList<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nroutes<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// console.log(adjacencyList);</span>\n</code></pre>\n<h3 id=\"dfs\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dfs\"></a>DFS</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Dfs</span></span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> dests <span class=\"token operator\">=</span> adjacencyList<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    dests<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dest</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>dest <span class=\"token operator\">===</span> <span class=\"token string\">\"Deh\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reached\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\"><span class=\"token maybe-class-name\">Dfs</span></span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\"><span class=\"token maybe-class-name\">Dfs</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mum\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"bfs\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#bfs\"></a>BFS</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// BFS with entry point Mum (also log if reached Bng)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">BFS</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n    visited<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> airport <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> dests <span class=\"token operator\">=</span> adjacencyList<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>airport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dests<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dest</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>dest <span class=\"token operator\">===</span> <span class=\"token string\">\"Bng\"</span><span class=\"token punctuation\">)</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reached Bng\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            visited<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span> \n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">BFS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mum\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/j9jpiepog4v2wpio08om6ng\">Big O Notation</a></li>\n</ol>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Root","desc":"","updated":1655025026733,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"dependencies/localhost/learning-notes","selfContained":true,"name":"learning-notes","sync":"sync"},"contentHash":"bc178ae9d620304b10fedbadacbc746f","links":[],"anchors":{"learning":{"type":"header","text":"Learning","value":"learning","line":7,"column":0,"depth":1}},"children":["fkhev0yr0bbwd3x499erqqp","trkx8xrg7g2fm023ez4ldqj","5mg2j4msjvokz541h0tdvni","c8csxid3zoghxorepwcrami","twdastnk7qsdzm0wt64i6cz","c31i1fsmoluyjb7iffcjabg","v6w7qcvk7gmeht0j9xzdtbd","cev4vzt27wi2rjm3znxgwkl","984qz0r52n001q7yxhrh1sm"],"parent":null,"data":{},"body":"# Learning\n\nThis vault contains my study notes\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableExportPodV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"dependencies/localhost/journal","selfContained":true,"name":"journal"},{"fsPath":"dependencies/localhost/learning-notes","selfContained":true,"name":"learning-notes","sync":"sync"},{"fsPath":"dependencies/localhost/mindfire-solutions","selfContained":true,"name":"mindfire-solutions"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"duplicateNoteBehavior":{"action":"useVault","payload":["learning-notes","mindfire-solutions","journal"]},"siteUrl":"localhost:3000","siteFaviconPath":"favicon.ico","siteIndex":"root","searchMode":"lookup"}}},"__N_SSG":true}