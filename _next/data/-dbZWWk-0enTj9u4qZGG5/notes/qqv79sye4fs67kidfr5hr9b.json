{"pageProps":{"note":{"id":"qqv79sye4fs67kidfr5hr9b","title":"deleteCmd","desc":"","updated":1662721055474,"created":1662721047003,"custom":{},"fname":"dendron.wip.codefile.deleteCmd","type":"note","vault":{"fsPath":"dependencies/localhost/learning-notes","selfContained":true,"name":"learning-notes","sync":"sync"},"contentHash":"8487a14c78f05cf0116981d8290d8e82","links":[{"type":"wiki","from":{"fname":"dendron.wip.codefile.deleteCmd","id":"qqv79sye4fs67kidfr5hr9b","vaultName":"learning-notes"},"value":"user.injectable","alias":"@injectable","position":{"start":{"line":45,"column":1,"offset":936},"end":{"line":45,"column":12,"offset":947},"indent":[]},"xvault":false,"to":{"fname":"user.injectable"}},{"type":"wiki","from":{"fname":"dendron.wip.codefile.deleteCmd","id":"qqv79sye4fs67kidfr5hr9b","vaultName":"learning-notes"},"value":"user.inject","alias":"@inject","position":{"start":{"line":48,"column":5,"offset":994},"end":{"line":48,"column":12,"offset":1001},"indent":[]},"xvault":false,"to":{"fname":"user.inject"}},{"type":"wiki","from":{"fname":"dendron.wip.codefile.deleteCmd","id":"qqv79sye4fs67kidfr5hr9b","vaultName":"learning-notes"},"value":"user.inject","alias":"@inject","position":{"start":{"line":49,"column":5,"offset":1037},"end":{"line":49,"column":12,"offset":1044},"indent":[]},"xvault":false,"to":{"fname":"user.inject"}},{"type":"wiki","from":{"fname":"dendron.wip.codefile.deleteCmd","id":"qqv79sye4fs67kidfr5hr9b","vaultName":"learning-notes"},"value":"user.inject","alias":"@inject","position":{"start":{"line":51,"column":5,"offset":1103},"end":{"line":51,"column":12,"offset":1110},"indent":[]},"xvault":false,"to":{"fname":"user.inject"}}],"anchors":{},"children":[],"parent":"te3qp2uqqudqkc2q7fvnah8","data":{}},"body":"<h1 id=\"deletecmd\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#deletecmd\"></a>deleteCmd</h1>\n<p>import {\nDLink,\nDVault,\nEngineDeletePayload,\nnormalizeUnixPath,\nNoteProps,\nNoteUtils,\nPosition,\nReducedDEngine,\nVaultUtils,\n} from \"@dendronhq/common-all\";\nimport { RemarkUtils } from \"@dendronhq/unified\";\nimport _ from \"lodash\";\nimport _md from \"markdown-it\";\nimport { inject, injectable } from \"tsyringe\";\nimport {\ncommands,\nTextEditor,\nUri,\nViewColumn,\nwindow,\nworkspace,\n} from \"vscode\";\nimport { URI, Utils } from \"vscode-uri\";\nimport { DENDRON_COMMANDS } from \"../../constants\";\nimport { isPathInWorkspace } from \"../utils/isPathInWorkspace\";</p>\n<p>type CommandOpts = any;</p>\n<p>type CommandOutput = EngineDeletePayload | void;\nexport type { CommandOutput as DeleteNodeCommandOutput };</p>\n<p>// function formatDeletedMsg({\n//   fsPath,\n//   vault,\n// }: {\n//   fsPath: string;\n//   vault: DVault;\n// }) {\n//   return <code>${Utils.basename(Uri.file(fsPath))} (${VaultUtils.getName( //     vault //   )}) deleted</code>;\n// }</p>\n<p><a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@injectable (Private)</a>()\nexport class DeleteCmd {\nconstructor(\n<a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@inject (Private)</a>(\"wsRoot\") private wsRoot: URI,\n<a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@inject (Private)</a>(\"ReducedDEngine\")\nprivate engine: ReducedDEngine,\n<a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@inject (Private)</a>(\"vaults\") private vaults: DVault[]\n) {}</p>\n<p>  key = DENDRON_COMMANDS.DELETE.key;</p>\n<p>  private async getBacklinkFrontmatterLineOffset(opts: { link: DLink }) {\nconst { link } = opts;\nconst vault = VaultUtils.getVaultByName({\nvaults: this.vaults,\nvname: link.from.vaultName as string,\n}) as DVault;\nconst noteWithLink = (\nawait this.engine.findNotes({ fname: link.from.fname, vault })\n)[0];\nconst fsPath = NoteUtils.getFullPath({\nnote: noteWithLink,\nwsRoot: this.wsRoot.fsPath,\n});\nconsole.log(\"fsPath<strong>**</strong>\", fsPath);\nconst fileContent = workspace.fs.readFile(Uri.file(fsPath)).toString();\nconst nodePosition = RemarkUtils.getNodePositionPastFrontmatter(\nfileContent\n) as Position;</p>\n<pre><code>return nodePosition?.end.line;\n</code></pre>\n<p>  }\n/**</p>\n<ul>\n<li>\n<p>When Delete Command is ran from explorer menu, it gets Uri as args\n*/\nprivate isUriArgs(opts: CommandOpts) {\nreturn !_.isEmpty(opts) &#x26;&#x26; opts.fsPath;\n}</p>\n<p>  private async deleteNote(params: {\nnote: NoteProps;\nopts: CommandOpts;\nctx: string;\n}) {\nconst { note, opts } = params;\nconst backlinks = note.links.filter((link) => link.type === \"backlink\");\nlet title;\nif (backlinks.length === 0) {\n// no need to show preview a simple\ntitle = <code>Delete note ${note.fname}?</code>;\n} else {\nawait this.showNoteDeletePreview(note, backlinks);\ntitle = <code>${note.fname} has backlinks. Delete note?</code>;\n}</p>\n<pre><code>const shouldProceed = await this.promptConfirmation(title, opts?.noConfirm);\nif (!shouldProceed) {\n  window.showInformationMessage(\"Cancelled\");\n  return;\n}\n\n// If Delete note preview is open, close it first\nif (backlinks.length !== 0) {\n  await commands.executeCommand(\"workbench.action.closeActiveEditor\");\n}\n\nconst out = (await this.engine.deleteNote(note.id)) as EngineDeletePayload;\nif (out.error) {\n  return;\n}\n// window.showInformationMessage(\n//   formatDeletedMsg({ fsPath: note.fname, vault: note.vault })\n// );\nawait commands.executeCommand(\"workbench.action.closeActiveEditor\");\nreturn out;\n</code></pre>\n<p>  }</p>\n<p>  async showNoteDeletePreview(note: NoteProps, backlinks: DLink[]) {\nlet content = [\n\"# Delete Node Preview\",\n\"<code>\",       `node type: note`,       \"\",       `# of backlinks to this note: ${backlinks.length}`,       \"</code>\",\n\"## Broken links after deletion\",\n<code>These links will be broken after deleting **${note.fname}**</code>,\n\"\",\n<code>Make sure to convert the broken links listed below accordingly.</code>,\n\"\",\n];</p>\n<pre><code>_.forEach(_.sortBy(backlinks, [\"from.vaultName\"]), async (backlink) => {\n  const fmLineOffset = await this.getBacklinkFrontmatterLineOffset({\n    link: backlink,\n  });\n  const entry = [\n    `- in **${backlink.from.vaultName}/${backlink.from.fname}**`,\n    `  - line *${backlink.position!.start.line + fmLineOffset}* column *${\n      backlink.position?.start.column\n    }*`,\n    `  - alias: \\`${backlink.alias ? backlink.alias : \"None\"}\\``,\n  ].join(\"\\n\");\n  content = content.concat(entry);\n});\n\nconst panel = window.createWebviewPanel(\n  \"deleteNodeNoteDeletePreview\",\n  \"Note Delete Preview\",\n  ViewColumn.One,\n  {}\n);\npanel.webview.html = _md().render(content.join(\"\\n\"));\nreturn content.join(\"\\n\");\n</code></pre>\n<p>  }</p>\n<p>  async promptConfirmation(title: string, noConfirm?: boolean) {\nif (noConfirm) return true;\nconst options = [\"Proceed\", \"Cancel\"];\nconst resp = await window.showQuickPick(options, {\ntitle,\nplaceHolder: \"Proceed\",\nignoreFocusOut: true,\n});\nreturn resp === \"Proceed\";\n}</p>\n<p>  async sanityCheck(opts?: CommandOpts) {\nif (<em>.isUndefined(window.activeTextEditor) &#x26;&#x26; </em>.isEmpty(opts)) {\nreturn \"No note currently open, and no note selected to open.\";\n}\nreturn;\n}</p>\n<p>  async run(opts?: CommandOpts): Promise<commandoutput> {\nconst ctx = \"DeleteNoteCommand\";\nif (NoteUtils.isNoteProps(opts)) {\nconst out = this.deleteNote({ note: opts, opts, ctx });\nreturn out;\n} else {\nconst editor = window.activeTextEditor as TextEditor;\nconst path = this.isUriArgs(opts) ? opts : editor.document.uri;\nconst mode = path.fsPath.endsWith(\".md\") ? \"note\" : \"schema\";\nconst trimEnd = mode === \"note\" ? \".md\" : \".schema.yml\";\nconst fname = _.trimEnd(Utils.basename(path), trimEnd);\nif (mode === \"note\") {\nconst vault = this.getVaultForOpenEditor(path.fsPath);\nconst note = (await this.engine.findNotes({ fname, vault }))[0];\nconst out = await this.deleteNote({ note, opts, ctx });\nreturn out;\n} else {\nwindow.showInformationMessage(\"schema delete not implemented yet\");\n}\n}\n}\ngetVaultForOpenEditor(fsPath: any) {\nlet vault: DVault;\nconst activeDocument = window.activeTextEditor?.document;\nconst fpath = fsPath || activeDocument?.uri.fsPath;\nconsole.log(\"fpath\", fpath, normalizeUnixPath(fpath));\nif (\nfpath &#x26;&#x26;\nisPathInWorkspace({\nwsRoot: this.wsRoot,\nvaults: this.vaults,\nfsPath: activeDocument?.uri!,\n})\n) {\nvault = VaultUtils.getVaultByFilePath({\nvaults: this.vaults,\nwsRoot: normalizeUnixPath(this.wsRoot.fsPath),\nfsPath: normalizeUnixPath(fpath),\n});\n} else {\nvault = this.vaults[0];\n}\nreturn vault;\n}\n}</commandoutput></p>\n</li>\n</ul>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Root","desc":"","updated":1655025026733,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"dependencies/localhost/learning-notes","selfContained":true,"name":"learning-notes","sync":"sync"},"contentHash":"bc178ae9d620304b10fedbadacbc746f","links":[],"anchors":{"learning":{"type":"header","text":"Learning","value":"learning","line":7,"column":0,"depth":1}},"children":["fkhev0yr0bbwd3x499erqqp","trkx8xrg7g2fm023ez4ldqj","5mg2j4msjvokz541h0tdvni","c8csxid3zoghxorepwcrami","twdastnk7qsdzm0wt64i6cz","c31i1fsmoluyjb7iffcjabg","v6w7qcvk7gmeht0j9xzdtbd","cev4vzt27wi2rjm3znxgwkl","984qz0r52n001q7yxhrh1sm"],"parent":null,"data":{},"body":"# Learning\n\nThis vault contains my study notes\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableExportPodV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"dependencies/localhost/journal","selfContained":true,"name":"journal"},{"fsPath":"dependencies/localhost/learning-notes","selfContained":true,"name":"learning-notes","sync":"sync"},{"fsPath":"dependencies/localhost/mindfire-solutions","selfContained":true,"name":"mindfire-solutions"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"duplicateNoteBehavior":{"action":"useVault","payload":["learning-notes","mindfire-solutions","journal"]},"siteUrl":"localhost:3000","siteFaviconPath":"favicon.ico","siteIndex":"root","searchMode":"lookup"}}},"__N_SSG":true}