{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Learning\n\nThis vault contains my study notes\n","n":0.378}}},{"i":2,"$":{"0":{"v":"Dendron","n":1}}},{"i":3,"$":{"0":{"v":"Wip","n":1}}},{"i":4,"$":{"0":{"v":"Codefile","n":1}}},{"i":5,"$":{"0":{"v":"deleteCmd","n":1},"1":{"v":"import {\n  DLink,\n  DVault,\n  EngineDeletePayload,\n  normalizeUnixPath,\n  NoteProps,\n  NoteUtils,\n  Position,\n  ReducedDEngine,\n  VaultUtils,\n} from \"@dendronhq/common-all\";\nimport { RemarkUtils } from \"@dendronhq/unified\";\nimport _ from \"lodash\";\nimport _md from \"markdown-it\";\nimport { inject, injectable } from \"tsyringe\";\nimport {\n  commands,\n  TextEditor,\n  Uri,\n  ViewColumn,\n  window,\n  workspace,\n} from \"vscode\";\nimport { URI, Utils } from \"vscode-uri\";\nimport { DENDRON_COMMANDS } from \"../../constants\";\nimport { isPathInWorkspace } from \"../utils/isPathInWorkspace\";\n\ntype CommandOpts = any;\n\ntype CommandOutput = EngineDeletePayload | void;\nexport type { CommandOutput as DeleteNodeCommandOutput };\n\n// function formatDeletedMsg({\n//   fsPath,\n//   vault,\n// }: {\n//   fsPath: string;\n//   vault: DVault;\n// }) {\n//   return `${Utils.basename(Uri.file(fsPath))} (${VaultUtils.getName(\n//     vault\n//   )}) deleted`;\n// }\n\n@injectable()\nexport class DeleteCmd {\n  constructor(\n    @inject(\"wsRoot\") private wsRoot: URI,\n    @inject(\"ReducedDEngine\")\n    private engine: ReducedDEngine,\n    @inject(\"vaults\") private vaults: DVault[]\n  ) {}\n\n  key = DENDRON_COMMANDS.DELETE.key;\n\n  private async getBacklinkFrontmatterLineOffset(opts: { link: DLink }) {\n    const { link } = opts;\n    const vault = VaultUtils.getVaultByName({\n      vaults: this.vaults,\n      vname: link.from.vaultName as string,\n    }) as DVault;\n    const noteWithLink = (\n      await this.engine.findNotes({ fname: link.from.fname, vault })\n    )[0];\n    const fsPath = NoteUtils.getFullPath({\n      note: noteWithLink,\n      wsRoot: this.wsRoot.fsPath,\n    });\n    console.log(\"fsPath******\", fsPath);\n    const fileContent = workspace.fs.readFile(Uri.file(fsPath)).toString();\n    const nodePosition = RemarkUtils.getNodePositionPastFrontmatter(\n      fileContent\n    ) as Position;\n\n    return nodePosition?.end.line;\n  }\n  /**\n   * When Delete Command is ran from explorer menu, it gets Uri as args\n   */\n  private isUriArgs(opts: CommandOpts) {\n    return !_.isEmpty(opts) && opts.fsPath;\n  }\n\n  private async deleteNote(params: {\n    note: NoteProps;\n    opts: CommandOpts;\n    ctx: string;\n  }) {\n    const { note, opts } = params;\n    const backlinks = note.links.filter((link) => link.type === \"backlink\");\n    let title;\n    if (backlinks.length === 0) {\n      // no need to show preview a simple\n      title = `Delete note ${note.fname}?`;\n    } else {\n      await this.showNoteDeletePreview(note, backlinks);\n      title = `${note.fname} has backlinks. Delete note?`;\n    }\n\n    const shouldProceed = await this.promptConfirmation(title, opts?.noConfirm);\n    if (!shouldProceed) {\n      window.showInformationMessage(\"Cancelled\");\n      return;\n    }\n\n    // If Delete note preview is open, close it first\n    if (backlinks.length !== 0) {\n      await commands.executeCommand(\"workbench.action.closeActiveEditor\");\n    }\n\n    const out = (await this.engine.deleteNote(note.id)) as EngineDeletePayload;\n    if (out.error) {\n      return;\n    }\n    // window.showInformationMessage(\n    //   formatDeletedMsg({ fsPath: note.fname, vault: note.vault })\n    // );\n    await commands.executeCommand(\"workbench.action.closeActiveEditor\");\n    return out;\n  }\n\n  async showNoteDeletePreview(note: NoteProps, backlinks: DLink[]) {\n    let content = [\n      \"# Delete Node Preview\",\n      \"```\",\n      `node type: note`,\n      \"\",\n      `# of backlinks to this note: ${backlinks.length}`,\n      \"```\",\n      \"## Broken links after deletion\",\n      `These links will be broken after deleting **${note.fname}**`,\n      \"\",\n      `Make sure to convert the broken links listed below accordingly.`,\n      \"\",\n    ];\n\n    _.forEach(_.sortBy(backlinks, [\"from.vaultName\"]), async (backlink) => {\n      const fmLineOffset = await this.getBacklinkFrontmatterLineOffset({\n        link: backlink,\n      });\n      const entry = [\n        `- in **${backlink.from.vaultName}/${backlink.from.fname}**`,\n        `  - line *${backlink.position!.start.line + fmLineOffset}* column *${\n          backlink.position?.start.column\n        }*`,\n        `  - alias: \\`${backlink.alias ? backlink.alias : \"None\"}\\``,\n      ].join(\"\\n\");\n      content = content.concat(entry);\n    });\n\n    const panel = window.createWebviewPanel(\n      \"deleteNodeNoteDeletePreview\",\n      \"Note Delete Preview\",\n      ViewColumn.One,\n      {}\n    );\n    panel.webview.html = _md().render(content.join(\"\\n\"));\n    return content.join(\"\\n\");\n  }\n\n  async promptConfirmation(title: string, noConfirm?: boolean) {\n    if (noConfirm) return true;\n    const options = [\"Proceed\", \"Cancel\"];\n    const resp = await window.showQuickPick(options, {\n      title,\n      placeHolder: \"Proceed\",\n      ignoreFocusOut: true,\n    });\n    return resp === \"Proceed\";\n  }\n\n  async sanityCheck(opts?: CommandOpts) {\n    if (_.isUndefined(window.activeTextEditor) && _.isEmpty(opts)) {\n      return \"No note currently open, and no note selected to open.\";\n    }\n    return;\n  }\n\n  async run(opts?: CommandOpts): Promise<CommandOutput> {\n    const ctx = \"DeleteNoteCommand\";\n    if (NoteUtils.isNoteProps(opts)) {\n      const out = this.deleteNote({ note: opts, opts, ctx });\n      return out;\n    } else {\n      const editor = window.activeTextEditor as TextEditor;\n      const path = this.isUriArgs(opts) ? opts : editor.document.uri;\n      const mode = path.fsPath.endsWith(\".md\") ? \"note\" : \"schema\";\n      const trimEnd = mode === \"note\" ? \".md\" : \".schema.yml\";\n      const fname = _.trimEnd(Utils.basename(path), trimEnd);\n      if (mode === \"note\") {\n        const vault = this.getVaultForOpenEditor(path.fsPath);\n        const note = (await this.engine.findNotes({ fname, vault }))[0];\n        const out = await this.deleteNote({ note, opts, ctx });\n        return out;\n      } else {\n        window.showInformationMessage(\"schema delete not implemented yet\");\n      }\n    }\n  }\n  getVaultForOpenEditor(fsPath: any) {\n    let vault: DVault;\n    const activeDocument = window.activeTextEditor?.document;\n    const fpath = fsPath || activeDocument?.uri.fsPath;\n    console.log(\"fpath\", fpath, normalizeUnixPath(fpath));\n    if (\n      fpath &&\n      isPathInWorkspace({\n        wsRoot: this.wsRoot,\n        vaults: this.vaults,\n        fsPath: activeDocument?.uri!,\n      })\n    ) {\n      vault = VaultUtils.getVaultByFilePath({\n        vaults: this.vaults,\n        wsRoot: normalizeUnixPath(this.wsRoot.fsPath),\n        fsPath: normalizeUnixPath(fpath),\n      });\n    } else {\n      vault = this.vaults[0];\n    }\n    return vault;\n  }\n}\n","n":0.039}}},{"i":6,"$":{"0":{"v":"Learning","n":1}}},{"i":7,"$":{"0":{"v":"Eng","n":1}}},{"i":8,"$":{"0":{"v":"Vocab","n":1}}},{"i":9,"$":{"0":{"v":"Meanings","n":1},"1":{"v":"\n\n- eminence: fame or acknowledged superiority within a particular sphere.\n> \"her eminence in cinematography\"\n- abdicate : renounce one's throne \n- by virtue of : because or as a result of.\n> By virtue of power vested in me, I hearby order for 2 pizzas\n- in lieu of : instead of\n- by dint of: by means of\n","n":0.135}}},{"i":10,"$":{"0":{"v":"Grammer","n":1}}},{"i":11,"$":{"0":{"v":"Preposition","n":1},"1":{"v":"\nword placed before a noun or pronoun to show in what relation the person or thing denoted by it stands in regard of something else.\n\n- _for_, _from_, _in_, _on_ are often omitted before nouns of place or time.\neg: We did it last week. I cannot  walk a yard. Wait a minute.\n\n- no preposition before these words:\n> net, last each, every\n\n![[notes.topic.eng.grammer.preposition.arrive-at-or-in#arrive-at-on-in,1]]\n\n![[notes.topic.eng.grammer.preposition.time-at-on-in]]\n\n***\n### Preposition in workplace\n\n\n__She works__\n\n## at\n>a specific place\n\n- at a bank\n- at my desk\n- at the airport\n\n## for\n>employer or length of time\n\n- for Dendron\n- for 8 hours\n\n## with\n>people, teams\n\n- with Susan\n- IT dept\n\n## in\n>city, place\n\n- in lonon\n- in a factory\n\n## on\n- on a laptop\n- on a project \n- on 5th loor\n\n","n":0.095}}},{"i":12,"$":{"0":{"v":"Time at on In","n":0.5},"1":{"v":"\n## Time at on in\n\n        /\\\n       /at\\ specific time\n      / on \\ 1 day  date\n     /  in  \\ months, seasons, years etc \n    /________\\","n":0.204}}},{"i":13,"$":{"0":{"v":"Arrive at or In","n":0.5},"1":{"v":"\n## Arrive At on in?\n```\n\n             Arrive \n           /        \\\n         /            \\\n     WHEN               WHERE\n   /  |   \\             /     \\\nat    on    in         at       in\n5pm   Sun   July      airport   London\n     \n```\n### WHEN\n- at: most specific period of time: hour, minute.\n- on: wider then a specific time: one date, one day\n- in : year, month\n\n### WHERE\n- at: specific place. doesn't matter if the name is specified or not.\neg: airport, hotel \n- in: city, country\n\n\n## Exceptions\n\nNo prepositions for \nyesterday, last year, next week, home\n\n","n":0.113}}},{"i":14,"$":{"0":{"v":"Dsa","n":1}}},{"i":15,"$":{"0":{"v":"Resource","n":1},"1":{"v":"- [Anuj Bahiya: Java](https://www.youtube.com/playlist?list=PLUcsbZa0qzu3yNzzAxgvSgRobdUUJvz7p)\n- [Traversy Media: JS Cardio](https://www.youtube.com/playlist?list=PLillGF-Rfqbb4ZOnsNCIB-DnLuUrQjS_G)\n- [Neetcode](https://www.youtube.com/watch?v=KLlXCFG5TnA&list=PLot-Xpze53ldVwtstag2TL4HQhAnC8ATf)\n- [MIT course- Algorithms](https://www.youtube.com/watch?v=ZA-tUyM_y7s&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY)\n- [Complete Resources list](https://medium.com/gitconnected/how-i-got-in-to-amazon-microsoft-google-all-from-studying-these-resources-31724508ce0e)\n- [Graph Theory](https://www.youtube.com/watch?v=DgXR2OWQnLc&list=PLDV1Zeh2NRsDGO4--qE8yH72HFL1Km93P)\n\n### Problem Set\n- [strivers-sde-sheet](https://takeuforward.org/interviews/strivers-sde-sheet-top-coding-interview-problems/)\n- Advance: https://cses.fi/problemset/","n":0.213}}},{"i":16,"$":{"0":{"v":"Leetcode","n":1},"1":{"v":"\n## Two pointer - Leetcode 121\n\n- find the (sum-num) in hashmap\n- if not present, store number and its index in hashmap\n- [[source code | dsa\\neetcode\\twoSum.js]]\n* Parses entire array in single pass: O(n)\n* adding an element to hashmap: O(1) constant time\n* reading an element from hashmap: O(1) constant\n    \n## Sliding Window: Best Time to Buy and Sell Stock - Leetcode 121\n\n![](/assets/images/2022-09-11-22-17-37.png)\n- two pointer\n- [[source code | dsa\\neetcode\\best-time-to-sell.js]]","n":0.123}}},{"i":17,"$":{"0":{"v":"CSS","n":1}}},{"i":18,"$":{"0":{"v":"Position","n":1},"1":{"v":"\n- static: (default) not positioned in any special way; it is always positioned according to the normal flow of the page.\n- relative: positioned relative to its normal position. Other content will not be adjusted to fit into any gap left by the element.\n- fixed: An element with `position: fixed;` is positioned relative to the viewport,\n- absolute: An element with `position: absolute` is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).\n\nHowever; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.\n- sticky: An element with `position: sticky;` is positioned based on the user's scroll position.","n":0.094}}},{"i":19,"$":{"0":{"v":"Flex Box","n":0.707},"1":{"v":"\n# Flexbox\n\n```css\n  display: flex;\n```\n## Properties\n\n### justify-content\naligns items horizontally.\n\nAccepted values: \n* flex-start: Items align to the left side of the container.\n* flex-end: Items align to the right side of the container.\n* center: Items align at the center of the container.\n* space-between: Items display with equal spacing between them.\n* space-around: Items display with equal spacing around them.\n\n### align-items\naligns items vertically.\n\nAccepted values: \n* flex-start: Items align to the top of the container.\n* flex-end: Items align to the bottom of the container.\n* center: Items align at the vertical center of the container.\n* baseline: Items display at the baseline of the container.\n* stretch: Items are stretched to fit the container.\n\n### align-content\n set how multiple lines are spaced apart from each other.\n * flex-start: Lines are packed at the top of the container.\n* flex-end: Lines are packed at the bottom of the container.\n* center: Lines are packed at the vertical center of the container.\n* space-between: Lines display with equal spacing between them.\n* space-around: Lines display with equal spacing around them.\n* stretch: Lines are stretched to fit the container.\n\n__This can be confusing, but align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.__\n\n### flex-direction\nproperty defines the direction items are placed in the container.\n\nAccepted values:\n* row: Items are placed the same as the text direction.\n* row-reverse: Items are placed opposite to the text direction.\n* column: Items are placed top to bottom.\n* column-reverse: Items are placed bottom to top.\n\n- __Notice that when you set the flex-direction to a reversed row or column, start and end are also reversed.__\n\n![](/assets/images/2022-04-04-17-37-37.png)\n\n- __Notice that when the flex direction is a column, justify-content changes to the vertical and align-items to the horizontal.__\n\n![](/assets/images/2022-04-04-19-26-13.png)\n\n### flex-wrap\nwraps the items of flexbox\n\nAccepts the following values:\n\n* nowrap: Every item is fit to a single line.\n* wrap: Items wrap around to additional lines.\n* wrap-reverse: Items wrap around to additional lines in reverse.\n\n### flex-flow\nThe two properties _flex-direction_ and _flex-wrap_ are used so often together that the shorthand property __flex-flow__ was created to combine them. This shorthand property accepts the value of the two properties separated by a space.\n\nFor example, you can use flex-flow: row wrap to set rows and wrap them.\n\n### align-self\nAnother property you can apply to individual items is align-self. This property accepts the same values as align-items and its value for the specific item.\n\n### order\nSometimes reversing the row or column order of a container is not enough. In these cases, we can apply the order property to individual items. By default, items have a value of 0, but we can use this property to also set it to a positive or negative integer value (-2, -1, 0, 1, 2).\n\n\n\n\n## TODO\nAnimation CSS #learn\n```css\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n","n":0.046}}},{"i":20,"$":{"0":{"v":"Tags","n":1}}},{"i":21,"$":{"0":{"v":"Learn","n":1},"1":{"v":"\nTopics to learn\n","n":0.577}}},{"i":22,"$":{"0":{"v":"Reading","n":1}}},{"i":23,"$":{"0":{"v":"You Dont Know JS","n":0.5}}},{"i":24,"$":{"0":{"v":"The Seven Husband of Evelyn Hugo","n":0.408},"1":{"v":"\n## Summary \n\nThe life of `Evelyn Hugo` is filled with scandal and fame. Over the course of her lifetime, she was married eight times to seven different husbands. Eighth time the charm, she secretly married the love of her life `Celia St James`, also an Oscar-winning actress. In an era prior to the acceptance of bisexuality, she was a bisexual. As she says herself, `I spent half my time loving her and half hiding how much I loved her.`. Evelyn, like any other human, made mistakes along the way. Although some of them were unforgivable, she believed she did what had to be done for her survival. She was suffering from `Breast Cancer` during her last days and wanted to come out of closet through her biography. She chose `Monique`, a struggling writer for `Vivane`(magazine) for writing her biography. A curious Monique wondered why Evelyn Hugo had chosen her out of all the writers. Evelyn asked Monique to justify her true character in the book. It was not in her interest to whitewash her actions. \n\n### Marriages\n- She married `Ernie Diaz` to get out of her depressing town where her father treated her like trash.\n- Fell in love with superstar `Don Adler`, became a victim of #domestic-violence, divorced.\n- Went to LA and married `Mick Riva` for a day to stop spreading any rumours about her and Celia.\n- Married `Rex North` as a publicity stunt to get TRP for upcoming movie.\n- Married her best-friend `Harry Cameron`(gay) to start a family of her own.\n- Fell in love with her director `Max Girard` divorced soon after she received a hint from Celia on getting back together.\n- Married `Robert Jamison`, Celia's brother to settle with Celia in Europe.\n- Married `Celia` in her bedroom. Celia suffered from a disease, died few years after.\n\n\n## Takeaways\n\n- `When you're given an opportunity to change your life, be ready to do whatever it takes to make it happen. The world doesn't give things, you take things`\n\n\n## Fav quotes\n- `The cruelest thing you can do to someone you love, give them just enough good to make them stick through a hell of a lot of bad.`","n":0.053}}},{"i":25,"$":{"0":{"v":"The Lean Startup","n":0.577},"1":{"v":"\n## 4. Experiment\n\n- gain validated learning\n- take initial steps like we perform a science experiment\n    - have a hypothesis\n    - make calculated prediction in theory\n    - perform\n- begin small experiments immediately\n    - break it down and calculate value and growth hypothesis(value hypothesis is if the new feature/product adds alue to customer? growth hypothesis describes the growth of feature/product after shipping it.)\n    - an experiment is a product. Instead of manager asking engineer to build certain requirements. The lean startup encourages team to answer these questions:\n        a. Do customer release it is a problem which you aim to solve?\n        b. If there was a solution, will it increase growth?\n        c. can we build the solution ?\n\n_success is not delivering feature; success is learning how to solve customer's problem_\n","n":0.089}}},{"i":26,"$":{"0":{"v":"Ram","n":1},"1":{"v":"## Comments\n\nThis is one of the best novels I have read recently. Initially it took me some time to get onboard. The frequent _sanskrit_ names and references and a better vocabulary requirement kept me from turning pages but as I moved on from my inertia of reading thrillers, I fell in love with the narration. It torches light on why do we workship who we worship. Ram is an ideal man, it is very inherent to be practical or you know just stupid, but to be ideal is something that requires both courage and sacrifice. ^dxpub7hs2rel\nP.S. Sita is the best part of novel.\n\n## Summary\n\n## Takeaways\n\n![[reading.ram#^dxpub7hs2rel]]\n## Fav quotes\n\n- sanskrit language:  _Kimapi Nu Janaahaa Vadishyanti. Tadeva Kaaryam Janaanaam_ \n    > People will talk nonsense. It is, after all their job.\n\n- Dashrath continued, _I blamed you for my defeat. You suffered all your life, and yet you never rebelled. I thought it was because you were weak. `But weak people celebrate when twists of fate hurt their tormentors`. And yet you risked your life to protect me_\n\n- If a tactic has lead to failure, then persisting with it unquesttioningly in the wild hope of a different outcome, is nothing short of insanity.\n\n- Emperor Prithu had spoken of the ideal human archetype of the _aryaputra_, a gentleman, and the _aryaputri_, a lady, a prototypical human partnership of two strong individuals, who didn't compete for exact equality but were complimentary, completing each other. Two souls that were dependent on each other, giving each other purpose; `two halves of a whole`\n\n## vocab\n- penury: extreme poverty\n- immitent: about to happen, overanging\n    > Ram knew that the attack was imminent\n- hastily: quickly\n    > Ram hastily sped towards chambers\n- accost: confronted/ approach and address (someone) boldly or aggressively.\n    > En route, they were accousted by Sumitra\n- admonish: reprimand\n    > _Go back to sleep_, admonished an irritated Ram.\n- flabbergasted: astonished\n- stoic: determined not to complain or show emotions\n    > Lakshman stood stoic and tight lipped.\n- chagrined: humiliated\n    > A chagrined Lakshman fell silent.\n- assuaging: soothe/calm\n    > We are assuaging our conscience\n- nuance: subtle difference\n    > There is a nuance that you are missing\n- exacerbate: make worse\n    > Confusion was exacerbated when two laws contradicted each other.\n- befuddle: confused\n    > I was enjoying the obvious befuddlement of my fellow hikers.\n\n","n":0.051}}},{"i":27,"$":{"0":{"v":"1984","n":1}}},{"i":28,"$":{"0":{"v":"Fitness","n":1}}},{"i":29,"$":{"0":{"v":"Yoga","n":1},"1":{"v":"\n- [Cult.fit](https://www.youtube.com/watch?v=H2VT2Y-AupA&list=PLYzUD5yJQ02koxNlacxNkzNcwX1yGEsBt)","n":0.707}}},{"i":30,"$":{"0":{"v":"Pushups","n":1},"1":{"v":"\n- [Cult.fit](https://www.youtube.com/watch?v=6LlpUqEYRAE&list=PLYzUD5yJQ02nTo_RT7YF89YUe-ju-C54r)","n":0.707}}},{"i":31,"$":{"0":{"v":"Arms and Biceps","n":0.577},"1":{"v":"- [Cult.fit](https://www.youtube.com/watch?v=v9pUWgG4JUQ&list=PLYzUD5yJQ02n1iUWzgeurqe-xu0WpuF1B)","n":0.707}}},{"i":32,"$":{"0":{"v":"Reading","n":1}}},{"i":33,"$":{"0":{"v":"Ram","n":1},"1":{"v":"## Comments\n\nThis is one of the best novels I have read recently. Initially it took me some time to get onboard. The frequent _sanskrit_ names and references and a better vocabulary requirement kept me from turning pages but as I moved on from my inertia of reading thrillers, I fell in love with the narration. It torches light on why do we workship who we worship.\nP.S. Sita is the best part of novel.\n\n## Summary\n\n## Takeaways\n\nRam is an ideal man, it is very inherent to be practical or you know just stupid, but to be ideal is something that requires both courage and sacrifice.\n\n## Fav quotes\n\n- sanskrit language:  _Kimapi Nu Janaahaa Vadishyanti. Tadeva Kaaryam Janaanaam_ \n    > People will talk nonsense. It is, after all their job.\n\n- Dashrath continued, _I blamed you for my defeat. You suffered all your life, and yet you never rebelled. I thought it was because you were weak. `But weak people celebrate when twists of fate hurt their tormentors`. And yet you risked your life to protect me_\n\n- If a tactic has lead to failure, then persisting with it unquesttioningly in the wild hope of a different outcome, is nothing short of insanity.\n\n- Emperor Prithu had spoken of the ideal human archetype of the _aryaputra_, a gentleman, and the _aryaputri_, a lady, a prototypical human partnership of two strong individuals, who didn't compete for exact equality but were complimentary, completing each other. Two souls that were dependent on each other, giving each other purpose; `two halves of a whole`\n\n## vocab\n- penury: extreme poverty\n- immitent: about to happen, overanging\n    > Ram knew that the attack was imminent\n- hastily: quickly\n    > Ram hastily sped towards chambers\n- accost: confronted/ approach and address (someone) boldly or aggressively.\n    > En route, they were accousted by Sumitra\n- admonish: reprimand\n    > _Go back to sleep_, admonished an irritated Ram.\n- flabbergasted: astonished\n- stoic: determined not to complain or show emotions\n    > Lakshman stood stoic and tight lipped.\n- chagrined: humiliated\n    > A chagrined Lakshman fell silent.\n- assuaging: soothe/calm\n    > We are assuaging our conscience\n- nuance: subtle difference\n    > There is a nuance that you are missing\n- exacerbate: make worse\n    > Confusion was exacerbated when two laws contradicted each other.\n- befuddle: confused\n    > I was enjoying the obvious befuddlement of my fellow hikers.\n\n","n":0.052}}},{"i":34,"$":{"0":{"v":"Home","n":1},"1":{"v":"Harshita's notes","n":0.707}}},{"i":35,"$":{"0":{"v":"Fitness","n":1}}},{"i":36,"$":{"0":{"v":"Topic","n":1}}},{"i":37,"$":{"0":{"v":"Eng","n":1}}},{"i":38,"$":{"0":{"v":"Vocab","n":1}}},{"i":39,"$":{"0":{"v":"Grammer","n":1}}},{"i":40,"$":{"0":{"v":"Dsa","n":1}}},{"i":41,"$":{"0":{"v":"CSS","n":1}}},{"i":42,"$":{"0":{"v":"Web","n":1},"1":{"v":"\n## Critical Rendering Path\n\n- sequence of steps the browser goes through to render the page ie. to convert html, css, js to pixels on your screen.\n\n```mermaid\ngraph TD;\n    DOM-->CSSDOM-->RenderTree--> Layout-->Paint;\n    DOM --> Javascript;\n    Javascript --> DOM\n    Javascript --> CSSDOM\n```\n### DOM\n- browser captures all contents of the page in DOM\n- full parsed representation of HTML markup.\n- browser constructs DOM incrementaly(building the dom as soon as we have the HTMl and not have to wait for entire HTMl page to render)\n- creates DOM based on token hierarchy\n```mermaid\ngraph TD;\nCharacters --> Tokens --> Nodes --> DOM\n```\n### CSSOM\n- browser captures all the styles of the page in a CSS OM\nconverts token to Nodes\n- css rules cascade down(children of body note inherit its parent's css)\n- can't use partial CSSOM since rules are overwritten\n- it is render blocking(browser blocks page rendering until the entire cssom is created)\n- more specific rules are expensive.\n\n### Render Tree\n- merge the two DOM and CSSOM in render tree\n- only captures visible content.\n### Layout\ndetermines the scrren size and position of each node in the screen.\n\n### Paint\nPaints pixels on the scrren\n\n\n## Optimizing CRP\n-  minimizing the number of critical resources by deferring non-critical ones' download, marking them as async,\n- optimizing the number of requests required along with the file size of each request,\n- optimizing the order in which critical resources are loaded by prioritizing the downloading of critical assets, thereby shortening the critical path length.","n":0.066}}},{"i":43,"$":{"0":{"v":"Web Vitals","n":0.707},"1":{"v":"\n## Web vitals\nstandard google guidelines to provide good UX\n- LCP(Largest ContentFul paint) : measures loading perf, within 2.5sec of initial load\n- First Input Delay(FID): measures interactivity, 100ms\n- Cumulative layout shift: measures visual stability.\n\n### Resource\n- [Traversy Media: DIY Chrome extension](https://www.youtube.com/watch?v=8B8LUn6XEkA)","n":0.16}}},{"i":44,"$":{"0":{"v":"Saas","n":1},"1":{"v":"\n## Resource\n- [Traversry Media](https://www.youtube.com/watch?v=nu5mdN2JIwM)","n":0.5}}},{"i":45,"$":{"0":{"v":"React","n":1},"1":{"v":"\n## Resources\n\n- [React](https://sapient.udemy.com/course/complete-react-developer-zero-to-mastery/)\n- https://kentcdodds.com/blog\n- https://overreacted.io/\n\n## Core fundamentals\n- x jsx, x rerendering, x virtual dom, state, props, components, parent, child, lifecycle, hooks \n## to make framework\n- [x] routing\n- [ ] error handling\n- [ ] state management(prop drilling) context api, redux\n- [ ] data fetching: react query, axios\n\n## Adavenced\n- performance and optimatisation: memoization : x useMemo, x useCallback, lazyloading\n- PWAs\n- configuration: babel, webpack, css preprocessing\n","n":0.126}}},{"i":46,"$":{"0":{"v":"Router","n":1},"1":{"v":"\nUpdtaes are done in v6 of react-router-dom: See here: [[React Router v6|notes.topic.react.router#react-router-v6]]\n## Browser Router\n```jsx\n<BrowserRouter>\n    // components you'd like to add routing capability\n </BrowserRouter>\n```\n\n## Router\n\nSpecify the path and component to render for that path. \n\nNOTE: \n* The below code will render about home and about component for path _/about_.\n\n```jsx\n    <Route path= '/' component= {Home} />\n    <Route path= '/about' component= {About} />\n    <Route path= '/shop/:id' component= {Shop} /> // dynamic route\n```\n\n## Switch\n\nStop rendering after first match. \nNOTE:\n* The below code will only render Home component for path _/about_. Since first match is_/_\n\n```jsx\n<Switch>\n    <Route path= '/' component= {Home} />\n    <Route path= '/about' component= {About} />\n</Switch>\n```\nTo overcome this, use the Route property: exact.\n\n```jsx\n<Switch>\n    <Route path= '/' exact component= {Home} />\n    <Route path= '/about' component= {About} />\n</Switch>\n```\n\n## Link\n\nAdding hyperlinks to your component. Thakes only one argument 'to'\n\n```jsx\n<Link to='/about'>\n <li>About</li>\n</Link>\n<Link to={`/shop/${item.id}`}> {item.name} </Link> \n```\nThe Link passes props to the component that gets rendered. \n\n## React Router Hooks\n\n### useParams\nuseParams(): get props passed by Link to the component.\n\n```jsx\n<Link to= {`/shop/${item.id}`}>View Details</Link>\n...\n<Route path='/shop/:id' component={ItemDetails}>\n...\nconst params = useParams() //can now access the param id with params.id\n```\n### useNavigate\n* Before v6, we had <Redirect to='/' /> to redirect from a component. Now <Redirect /> is replaced with <Navigate />. We can also use new hook useNavigate to further redirect. This also replaces the __goBack__ method of react-router-dom. \n\n```jsx\nconst navigate = useNavigate();\nuseEffect(()=> {\n    ...\n    if(res.error === '404'){\n        navigate('/')\n    }\n},[])\n```\n* If you want to go back to the most recent page from history you can write\n```jsx\n<div onClick={() => navigate(-1)}> Go Back </div>\n```\n### useLocation\nThe new hook useLocation to get the location of route.\n```jsx\nconst location = useLocation();\nconst { pathname } = location // path name is the route; /shop/231\n```\n## React Router v6\nThe v6 has various backwards incomaptible changes: Here is the changelog of them\n\n## Changes\n\n* <Switch> has been removed from v6. \n* You need to wrap all your Route under <Routes>\n* no need to do _exact_ anymore.\n* <Redirect /> is repaced with <Navigate />\n* __component__ property of <Route> is changed to __element__. It takes JSX as an argument.\n\nBefore:\n```jsx \n<Route path= '/' component={Home}> \n```\nNew: \n```jsx\n<Routes>\n    <Route path='/' element={<About />}>\n</Routes> \n```\n* can access the params passed to Component only with [[useParams|notes.topic.react.router#useparams]]. The ({match}) prop is no longer valid\n\n* __goBack__ method is no longer valid","n":0.052}}},{"i":47,"$":{"0":{"v":"Query","n":1},"1":{"v":"\n# React Query\n- library for managing server state.\n","n":0.354}}},{"i":48,"$":{"0":{"v":"Performance","n":1},"1":{"v":"\n# Performance\nFor every state update, React component re-renders. When the parent component re-renders, all its children are re-rendered. This causes a performance issue. To minimize re-rendering of Components which are unaffected by the state change, we use advance concepts like memoization.\n\n## Memoisation\n- If the props of Child Component does not change, it will not rerender along with the Parent.\n\n### React.memo\nMemoizes a component.\n\n#### Functional Component\nWrap component in React.memo() while exporting for functional component.\n```js\nexport default React.memo(Card); // Card is name of component\n```\n#### Class Component\nExtend React.PureComponent instead of React.Component\n\n### useCallback hook\nIt returns a memoized version of the callback that only changes if one of the dependencies has changed. This is necessary when App sends callback as a Prop to child.\n- Rule of Thumb: always wrap _the function in useCallback_ which is passed as a prop if the __component is memoized__.\n\n```js\n  const handleChange = useCallback((e) => {\n    setSearchKey(e.target.value);\n  },[])\n```\n\n### useMemo hook\nuseMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n\n\n## Code splitting\n\n```jsx\nimport OtherComponent from './OtherComponent';\nAfter:\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n```\n\n## Suspense\n\n```jsx\n  <Suspense fallback={<div>Loading...</div>}></Suspense>\n\n```","n":0.074}}},{"i":49,"$":{"0":{"v":"Fundamentals","n":1},"1":{"v":"\n## React\n\nA JS library for building User interfaces.\n\n- uses Virtual DOM\n- unindirectional data flow\n- reusable UI components\n\n## Functional components over Class\n- use functional comp over class, after 16.8 hooks can be used as lifecycle events.\n- use class component when you want a react functionality that is not availabke for functions yet, eg: error boundries\n- Only class components can be error boundaries. To make class component an error boundary we define a new lifecycle method called componentDidCatch(error, info).\n\n\nReactDOM.render function: takes 2 i/p\n- App\n- document.getElementById(\"root\")\n\n## React State vs Props\n- State of a component is an object that holds some information that may change over the lifetime of the component.\n- props are inputs to a component, They are data passed down from a parent component to a child component.\n\nBoth props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.\n\n## TODO\n- React.StrictMode #learn\n","n":0.074}}},{"i":50,"$":{"0":{"v":"JavaScript","n":1},"1":{"v":"\nJS is a synchronous, single threaded language.\nSingle treaded means runs one command at a time and in a specific order.\nJS is loosely typed language. This means any variable is not strictly bind to a data type.\n\n## Execution context\n\nExecution context is simply the environment within which your code is ran.\nIt has 2 components\n\n- Memory Component(Variable environment): variable and funcs are stored in key: value pairs.\n- Code Component(Thread of execution): place where code is executed one line at a time.\n\n### Two stages of Execution context\n\n- **creation**(memory creation) and\n- **executing**(code execution) phase.\n\n### Two types of execution context\n\n- Global and Function\n\nAs the JavaScript engine starts to read your code, it creates something called the Global Execution Context.\n\n## Lexical environment\n\n- A lexical environment is basically the scope or environment the engine is currently\n  reading code in.\n- A new lexical environment is created when curly brackets {} are used,\n  even nested brackets {{...}} create a new lexical environment.\n- The execution context tells the engine which lexical environment it is currently working in and the lexical scope determines the available variables.\n- lexical env of a func: local memory of function + refrence to lexical parents's lexical env(closure) + lexical env of parent's parent until global scope.\n\n## Scope chain\n\nEach environment context that is created has a link outside of its lexical environment \ncalled the scope chain. The scope chain gives us access to variables in the parent \nenvironment.\n\n## Block\n- defined by `{}`. It groups together multiple js statements and use it where js syntax is expecting single statement\n- let/const are `block scoped`.\n- a new `{}` does not create a new scope for `var`, var is a `function` scope\n\n## let and const\n- are hoiseted, but are in `temporal dead zone`(the time between a let/const is hoisted and initialized with a value) for the time being.\n- accessing a variable in temporal dead zone throws reference error\n- cannot redeclare let and const within the same scope unlike `var`. let will throw syntax error and const will throw Type error, since const is of `constant` type.\n- `const` needs to be declare and initialization at the same time, unlike `let` which can be initialized later in the code.\n- unlinke `var` let/const are block scoped. Each `{}` creates a new scope for let/const\n\n## closure\nfunction along with its lexical scope bundled together forms a closure.\nUses: currying\n\n## Hoisting\n\n- Hoisting is the process of puting all variable and function declarations into memory\n  during the compile phase.\n- var are hoisted(allocated memory) and initialized with a value of `undefined`\n- function declarations are fully hoisted eg: function a() {}\n- function expression are hoisted as undefined. (eg: var a = function () {})\n- let and const are hoisted but are not initialized with any initial value. Using them before initialization throws reference error\n\n### Takeaways\n\nAvoid hoisting when possible. It can cause memory leaks and hard to catch\nbugs in your code. Use let and const as your go to variables.\n\n## Difference between arrow function and normal function\n\n- arrow funcs are not just a syntactic sugar to normal functions\n- They are a compact alternative to a regular function, but also without its own bindings to `this`, `arguments`, `super`, or `new.target` keywords.\n- Arrow func cannot be used as constructors and are not the best option for methods.\n\n```js\nvar obj = {\n // does not create a new scope\n i: 10,\n b: () => console.log(this.i, this),\n c: function() {\n console.log(this.i, this);\n }\n};\nobj.b(); // prints undefined, Window {...} (or the global object)\nobj.c(); // prints 10, Object {...}```\n```\n\n## Call, bind, apply\n\n### Call\n- invoke a function with passed references and arguments.\n- used function borrowing\n- 1st param of call is a reference, i.e what should call bind this to? rest are the arguments to the function\n\n### bind\nreturns you a copy of method which can be called later.\n- function borrowing\n- When a function is used as a callback, `this` is lost. The bind() method solves this problem.\neg: https://www.w3schools.com/js/js_function_bind.asp\n\npolyfill for bind:\n```js\nconst uname2 = {\n\tfname: \"Jo\",\n\tlname: \"Joshi\",\n}\nfunction fullName(city,state) {\n\tconsole.log(this.fname + \" \" + this.lname + \" \" + city + \" \" + state)\n}\nFunction.prototype.myBind2 = function(...args) {\n\tconst fun = this;\n\tconst param = args.slice(1)\n\treturn function(...arg) {\n\t\tfun.apply(args[0], [...param,...arg])\n\t}\n}\n\nconst test = fullName.myBind2(uname2,\"hld\")\ntest(\"UK\");\n```\n\n## Currying\n\n- by bind method\n```js\nlet multiply = function(x,y) {\n\tconsole.log(x*y)\n}\n\nconst multiplyBy2 = multiply.bind(this, 2);\nmultiplyBy2(9)\n```\n\n- by closures\n```js\n function multiply(x) {\n\treturn function(y) {\n\t\treturn x*y\n\t}\n }\n const multiplyBy2 = multiply(2);\n console.log(multiplyBy2(4))\n```\n\n### imp interview ques\nhttps://javascriptinterviewquestions.com/2020/04/add123-in-javascript-currying-interview.html\n\n## Debounce\n\n- limiting the rate of execution of a particular function\n\n## this\n\nFree function invocations in javascript have `this` bound to the global scope.\n\n\n## Event Propagation\nhappens in 3 phases\n- Capturing phase: event goes down from root element to the target element\n- target phase: event reaches the target elem\n- bubbling phase: When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.\nTo stop bubbling: event.stopPropagation()\n```html\n<body onclick=\"alert(`the bubbling doesn't reach here`)\">\n  <button onclick=\"event.stopPropagation()\">Click me</button>\n</body>\n```\n\n## Async vs defer\n\n### Defer\nThe defer attribute tells the browser not to wait for the script. Instead, the browser will continue to process the HTML, build DOM. The script loads “in the background”, which makes it non-blocking and then runs when the DOM is fully built.\n\nHere’s the same example as above, but with defer:\n\n```html\n<p>...content before script...</p>\n\n<script defer src=\"https://javascript.info/article/script-async-defer/long.js?speed=1\"></script>\n\n<!-- visible immediately -->\n<p>...content after script...</p>\n```\n\n- DOMContentLoadedEvent\nBoth solves two problems\nScripts can’t see DOM elements below them, so they can’t add handlers etc.\nIf there’s a bulky script at the top of the page, it “blocks the page”. Users can’t see the page content till it downloads and runs:\n\n\n## Folder structure\n\n- package.json: app metadata and configuration\n- manifest.json: app metadata that makes application progressive web app.\n  - provides metadata used when your web app is installed on a\n    user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n- `defer` in <script>\n\n## Fundamentals\n\n- browser\n- v8 engine\n\n## Array Methods\n### reduce \n```JS\nconst arr = [{\n\tfirstname: \"john\", lastName: \"Doe\", age: 12\n},\n{\n\tfirstname: \"Martha\", lastName: \"Stewart\", age: 22\n},\n{\n\tfirstname: \"Scar\", lastName: \"Jo\", age: 82\n}]\n\nconst data = arr.reduce((acc, curr) => {\nif(curr.age<30) acc.push(curr.firstname);\nreturn acc;\n},[])\n```\n\n### polyfill for map\n\n```js\nArray.prototype.myArray = function(cb) {\n    const obj = this;\n    const returnArr=[];\n    for(var i=0; i<obj.length;i++){\n        returnArr.push(cb(obj[i],i,obj))\n    }\n    return returnArr;\n}\n```\n\n\n## Promise\n- a JS Object which may produce a value in future either a resolved value or a reason it is not reselved\n- can be in one of the three states\n\t- pending\n\t- fullfilled or\n\t- rejected\n```js\nconst promise = new Promise((resolve,reject) => {\n\tsetTimeout(() => {\n\t\tresolve(\"done\")\n\t}, 3000)\n})\n\nasync function x(val) {\nreturn new Promise((resolve,reject) => {\n\tsetTimeout(() => {if(val%2===0) {\n\t\tresolve(\"even\")\n\t} else {\n\t\treject(\"odd\")\n\t}\n\t}, 1000)\n})\n}\n```\n\n### Promise.all\n- The Promise.all() method takes an iterable of promises as an input, and returns a single Promise that resolves to an array of the results of the input promises. \n- fail-fast behavior\n\n## Callback hell\n- Callback hell is a antipattern when there are nested callbacks leading to unlegibale code.\nCan be fixed by:\n- async awaits\n- writing promises\n\n\n\n## Ariety\n\nsum(1)(2)....(5) = //\n\n\n```js\nfunction add(...args) {\n  let a = args.reduce((a, b) => a + b, 0)\n  return function(...args){\n    let b = args.reduce((a, b) => a + b, 0)\n    if(b){\n      return add(a+b)\n    }\n    return a\n  }\n}\n```\n\n\n## Prototypical Ineritence","n":0.03}}},{"i":51,"$":{"0":{"v":"Performance","n":1},"1":{"v":"\n## Memoization\n- Memoization is a way to cache a return value of a function based on its parameters.\n- This makes the func that takes a long time to run, much faster after one execution. \n- If the parameter changes, it will still have to reevaluate the function. \n\n# Rate Limiting\n\n## Debouncing\n\n- limiting the rate of execution of a particular function\n- used in search bars etc.\n- I have normally used lodash Debouncing\n\n### Create debounce fun from scratch\n\n```js\nconst handleChange = (e) => {\n    console.log(e.target.value);\n}\nconst debounce = (fn, wait) => {\n    let timer;\n    return function(...args) {\n        const context = this; // maintains the context, so that the fn is called within the same lexical environment with same arguments as it was running before wrapping it around a debounce function.\n        clearTimeout(timer) // clear timer in subsequent keystrokes.\n         timer = setTimeout(() => {\n            fn.apply(context, args)\n        }, wait);\n    }\n}\nconst optiminzedFn = debounce(handleChange)\n```\n\n## Throttling\n\n","n":0.082}}},{"i":52,"$":{"0":{"v":"Algo","n":1},"1":{"v":"This hierarchy contains my notes for algorithms\n\n\n## Binary Search Tree\n\nBinary Search Tree is a node-based binary tree data structure which has the following properties:\n\n- The left subtree of a node contains only nodes with keys lesser than the node’s key.\n- The right subtree of a node contains only nodes with keys greater than the node’s key.\n- The left and right subtree each must also be a binary search tree.\n\n\nInorder traversal(Left --> Root --> Right) of BST gives a sorted values.\n\n\n## AVL Tree\nAVL tree is a self-balancing Binary Search Tree (BST) where the difference between heights of left and right subtrees cannot be more than one for all nodes.\n\n## Graph Algos\nhttps://www.youtube.com/watch?v=cWNEl4HE2OE\n\n### Creating adjacency list\n```js\nconst airports = \"Del Mum Kol Bng Deh Pnt\".split(\" \");\n//console.log(airports);\nconst routes = [\n    [\"Del\", \"Deh\"],\n    [\"Del\", \"Mum\"],\n    [\"Del\",\"Bng\" ],\n    [\"Mum\", \"Kol\"],\n    [\"Deh\", \"Pnt\"]\n    ];\n\nconst adjacencyList = new Map();// add key value\nfunction addNode(airport) {\n    adjacencyList.set(airport,[])\n}\nairports.forEach(airport => addNode(airport));\n//console.log(adjacencyList);\n\nfunction addEdge(src, dest) {\n    adjacencyList.get(src).push(dest);\n    adjacencyList.get(dest).push(src);\n}\nroutes.forEach(route => addEdge(...route))\n// console.log(adjacencyList);\n```\n### DFS\n\n```js\nfunction Dfs(root, visited = new Set()) {\n    visited.add(root);\n    const dests = adjacencyList.get(root);\n    \n    dests.forEach(dest => {\n        console.log(dest)\n        if(dest === \"Deh\") {\n            console.log(\"reached\");\n            return;\n        }\n        if(!visited.has(dest)) {\n            Dfs(dest, visited)\n        }\n    })\n}\nDfs(\"Mum\")\n```\n\n### BFS\n\n```js\n// BFS with entry point Mum (also log if reached Bng)\n\nfunction BFS(root) {\n    const visited = new Set();\n    const queue = [root]\n    visited.add(root)\n\n    while(queue.length > 0) {\n        const airport = queue.shift(1);\n        const dests = adjacencyList.get(airport);\n        dests.forEach(dest => {\n            console.log(dest)\n            if(dest === \"Bng\") console.log(\"Reached Bng\")\n        if(!visited.has(dest)){\n            visited.add(dest)\n            queue.push(dest) \n\n        }\n        }\n            )\n    }\n    console.log(visited)\n\n}\nBFS(\"Mum\")\n```","n":0.065}}},{"i":53,"$":{"0":{"v":"Big O Notation","n":0.577},"1":{"v":"\n- Numeric representation of performance of a code.\n- helps us to generalise a code so that we can compare between 2 approaches and conclude which one is the best fit.(bad analogy but just like ritcher scale is for earthquake)\n\n## Example\n\n### Sum of a numbers till n\nApproach 1: O(n)\n```js\ntotal =0;\nfor (i=0;i<=n;i++>){\n total +=n;\n}\n```\nBetter approach: O(1)\n```js\nconst total = n * (n+1)/2;\n```","n":0.13}}},{"i":54,"$":{"0":{"v":"Graph","n":1}}},{"i":55,"$":{"0":{"v":"Styles","n":1},"1":{"v":"\n\n/* Any graph node */\nnode {\n    background-color: #AC2065;\n    color: #AC2065;\n    font-family: cursive;\n }\n\n/* Any graph edge */\nedge {\n   width: 1;\n   line-color :#5CBAC5;\n   target-distance-from-node: 6;\n   source-distance-from-node: 6;\n   source-endpoint: outside-to-line-or-label;\n   target-endpoint: outside-to-line-or-label;\n}\n\n/* Any selected node */\n:selected {\n   shape-rendering: diamond;\n   background-color: coral;\n   color: coral;\n}\n/** AC2065 **/\n/* Any parent nodes (local note graph only) */\n.parent {\n   color: #27AC2C;\n   background-color: #27AC2C;\n}\n\n/* Any link connection edge */\n.links {\n   curve-style: unbundled-bezier;\n}\n\n/* Any hierarchy connection edge */\n.hierarchy {\n   curve-style: segments;\n}","n":0.118}}}]}
